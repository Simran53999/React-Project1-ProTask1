[{"J:\\Project\\protask\\src\\index.js":"1","J:\\Project\\protask\\src\\App.js":"2","J:\\Project\\protask\\src\\reportWebVitals.js":"3","J:\\Project\\protask\\src\\Components\\Form.js":"4","J:\\Project\\protask\\src\\Components\\TodoList.js":"5","J:\\Project\\protask\\src\\Components\\Todo.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":1823,"mtime":1607724813259,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1199,"mtime":1607724806725,"results":"11","hashOfConfig":"8"},{"size":475,"mtime":1607724810285,"results":"12","hashOfConfig":"8"},{"size":862,"mtime":1607724808558,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"94jofy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"J:\\Project\\protask\\src\\index.js",[],["28","29"],"J:\\Project\\protask\\src\\App.js",["30"],"import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Form from \"./Components/Form\";//importing components\nimport TodoList from \"./Components/TodoList\"; //importing components\nfunction App() {\n  //state stuff\n  const [inputText, setInputText] = useState(\"\"); //state for input in the list\n  const [todos, setTodos] = useState([]); //state for storing input of todos,in array of objects\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  //run once when starts\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n  //use effect\n  useEffect(() => {\n      //functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n          setFilteredTodos(todos.filter(todo => todo.completed === false));\n          break;\n      default:\n           setFilteredTodos(todos);\n           break;  \n    }\n  };\n  saveLocalTodos();\n    filterHandler();\n    \n  }, [todos, status]);\n //save to local\n const saveLocalTodos = () => {\n     localStorage.setItem(\"todos\",JSON.stringify(todos));\n };\n const getLocalTodos = () => {\n  if(localStorage.getItem('todos') == null){\n    localStorage.setItem('todos',JSON.stringify([]));\n  }else{\n    let todoLocal = JSON.parse(localStorage.getItem('todos'));\n    setTodos(todoLocal);\n  }\n };\n  \n  return (\n    <div className=\"App\">\n      <header>\n  <h1>ProTask</h1>\n      </header>\n      <Form \n      todos={todos} \n      setTodos={setTodos} \n      setInputText={setInputText} \n      inputText={inputText}\n      setStatus={setStatus}\n      />   \n      <TodoList \n      filteredTodos={filteredTodos}\n      setTodos={setTodos} \n      todos={todos} />  \n    </div>\n  );\n}\n\nexport default App;\n","J:\\Project\\protask\\src\\reportWebVitals.js",[],"J:\\Project\\protask\\src\\Components\\Form.js",[],"J:\\Project\\protask\\src\\Components\\TodoList.js",[],"J:\\Project\\protask\\src\\Components\\Todo.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":34,"column":6,"nodeType":"37","endLine":34,"endColumn":21,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveLocalTodos'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [todos, status, saveLocalTodos]",{"range":"44","text":"45"},[1061,1076],"[todos, status, saveLocalTodos]"]